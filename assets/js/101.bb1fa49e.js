(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{382:function(t,n,e){"use strict";e.r(n);var l=e(14),a=Object(l.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"table"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#table"}},[t._v("#")]),t._v(" Table")]),t._v(" "),n("h3",{attrs:{id:"基础表格"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础表格"}},[t._v("#")]),t._v(" 基础表格")]),t._v(" "),n("blockquote",[n("p",[t._v("给 "),n("code",[t._v("table")]),t._v("元素传入 "),n("code",[t._v("columns")]),t._v("、"),n("code",[t._v("data")]),t._v("属性即可在画布自动绘制出相应表格")])]),t._v(" "),n("ClientOnly",[n("vp-table")],1),t._v(" "),n("div",{staticClass:"language-canvas extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<canvas width="800" height="300">\n\t<table width="500" height="250" :columns="head" :data="list"></table>\n</canvas>\n<script>\nexport default {\n\tdata: {\n  \t\tcolLen: 10,\n            \trowLen: 4,\n\t\thead: [],\n\t\tlist: []\n\t},\n\tmounted() {\n\t\tconst head = Array.from({ length: this.colLen.value }).map((e, i) => ({\n            \t\tfield: `col${i}`,\n            \t\tlabel: `col${i + 1}`,\n        \t}))\n        \tlet list = []\n        \tfor (let i = 0, l = this.rowLen.value, row = {}; i < l; i++) {\n            \t\trow = {}\n            \t\tfor(let j = 0, k = head.length; j < k; j++) {\n                \t\trow.index = i + 1\n                \t\trow[`col${j}`] = `row-${i + 1}-col${j + 1}`\n            \t\t}\n            \t\tlist.push(row)\n        \t}\n\t\tthis.head.value = head\n\t\tthis.list.value = list\n\t}\n}\n<\/script>\n')])])]),n("h3",{attrs:{id:"固定列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#固定列"}},[t._v("#")]),t._v(" 固定列")]),t._v(" "),n("blockquote",[n("p",[t._v("给列传入 "),n("code",[t._v("fixed")]),t._v("属性即可将该列固定")])]),t._v(" "),n("ClientOnly",[n("vp-table-fixed")],1),t._v(" "),n("div",{staticClass:"language-canvas extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<canvas width="800" height="500">\n\t<table width="500" height="250" :columns="head" :data="list"></table>\n</canvas>\n<script>\nexport default {\n\tdata: {\n\t\tcolLen: 10,\n            \trowLen: 4,\n\t\thead: [],\n\t\tlist: [],\n\t\tfixedLeftColIndex: [6],\n\t\tfixedRightColIndex: [8]\n\t},\n\tmounted() {\n\t\tconst head = Array.from({ length: this.colLen.value }).map((e, i) => ({\n            \t\tfield: `col${i}`,\n            \t\tlabel: `col${i + 1}`,\n\t\t\t\t\tfixed: ((i) => {\n\t\t\t\t\t\tif (this.fixedLeftColIndex.includes(i)) {\n\t\t\t\t\t\t\treturn \'left\'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.fixedRightColIndex.includes(i)) {\n\t\t\t\t\t\t\treturn \'right\'\n\t\t\t\t\t\t}\n\t\t\t\t\t})(i),\n\t\t\t\t}))\n        \tlet list = []\n        \tfor (let i = 0, l = this.rowLen.value, row = {}; i < l; i++) {\n            \t\trow = {}\n            \t\tfor(let j = 0, k = head.length; j < k; j++) {\n                \t\trow.index = i + 1\n                \t\trow[`col${j}`] = `row-${i + 1}-col${j + 1}`\n            \t\t}\n            \t\tlist.push(row)\n        \t}\n\t\tthis.head.value = head\n\t\tthis.list.value = list\n\t}\n}\n<\/script>\n\n')])])]),n("h3",{attrs:{id:"选择列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#选择列"}},[t._v("#")]),t._v(" 选择列")]),t._v(" "),n("blockquote",[n("p",[t._v("给列传入值为 "),n("code",[t._v("checkbox")]),t._v("的 "),n("code",[t._v("type")]),t._v("属性即将该列变为一个选择列")])]),t._v(" "),n("ClientOnly",[n("vp-table-selection")],1),t._v(" "),n("div",{staticClass:"language-canvas extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<canvas width="800" height="300">\n\t<table width="500" height="250" :columns="head" :data="list"></table>\n</canvas>\n<script>\nexport default {\n\tdata: {\n\t\tcolLen: 10,\n            \trowLen: 4,\n\t\thead: [],\n\t\tlist: [],\n\t\tfixedLeftColIndex: [],\n\t\tfixedRightColIndex: []\n\t},\n\tmounted() {\n\t\tconst head = Array.from({ length: this.colLen.value }).map((e, i) => ({\n            \t\tfield: `col${i}`,\n            \t\tlabel: `col${i + 1}`,\n\t\t\t\t\tfixed: ((i) => {\n\t\t\t\t\t\tif (this.fixedLeftColIndex.includes(i)) {\n\t\t\t\t\t\t\treturn \'left\'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.fixedRightColIndex.includes(i)) {\n\t\t\t\t\t\t\treturn \'right\'\n\t\t\t\t\t\t}\n\t\t\t\t\t})(i),\n\t\t\t\t}))\n\t\thead.unshift({\n\t\t\ttype: \'checkbox\',\n\t\t\tfixed: \'left\',\n\t\t\twidth: 35\n\t\t})\n        \tlet list = []\n        \tfor (let i = 0, l = this.rowLen.value, row = {}; i < l; i++) {\n            \t\trow = {}\n            \t\tfor(let j = 0, k = head.length; j < k; j++) {\n                \t\trow.index = i + 1\n                \t\trow[`col${j}`] = `row-${i + 1}-col${j + 1}`\n            \t\t}\n            \t\tlist.push(row)\n        \t}\n\t\tthis.head.value = head\n\t\tthis.list.value = list\n\t}\n}\n<\/script>\n')])])]),n("h3",{attrs:{id:"树形表头"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#树形表头"}},[t._v("#")]),t._v(" 树形表头")]),t._v(" "),n("blockquote",[n("p",[t._v("给列传入 "),n("code",[t._v("children")]),t._v("属性即可为该列添加子列")])]),t._v(" "),n("ClientOnly",[n("vp-table-children")],1),t._v(" "),n("div",{staticClass:"language-canvas extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<canvas width=\"800\" height=\"500\">\n\t<table width=\"500\" height=\"500\" :columns=\"head\" :data=\"list\"></table>\n</canvas>\n<script>\nexport default {\n\tdata: {\n\t\tcolLen: 10,\n            \trowLen: 4,\n\t\thead: [],\n\t\tlist: [],\n\t\tfixedLeftColIndex: [],\n\t\tfixedRightColIndex: []\n\t},\n\tmounted() {\n\t\tconst head = Array.from({ length: this.colLen.value }).map((e, i) => ({\n            \t\tfield: `col${i}`,\n            \t\tlabel: `col${i + 1}`,\n\t\t\t\t\tfixed: ((i) => {\n\t\t\t\t\t\tif (this.fixedLeftColIndex.includes(i)) {\n\t\t\t\t\t\t\treturn 'left'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.fixedRightColIndex.includes(i)) {\n\t\t\t\t\t\t\treturn 'right'\n\t\t\t\t\t\t}\n\t\t\t\t\t})(i),\n\t\t\t\t}))\n\t\t\t\t\thead.unshift({ \n            \t\t\t\t\tlabel: 'col-parent', \n            \t\t\t\t\tchildren: [\n                \t\t\t\t\t{ \n                    \t\t\t\t\t\tlabel: 'col-1', \n                    \t\t\t\t\t\tchildren: [\n                        \t\t\t\t\t\t{\n                            \t\t\t\t\t\t\tlabel: 'col-1-1',\n                            \t\t\t\t\t\t\tfield: 'col1',\n                            \t\t\t\t\t\t\tchildren: [\n                                \t\t\t\t\t\t\t{\n                                    \t\t\t\t\t\t\t\tlabel: 'col-1-1-1',\n                                    \t\t\t\t\t\t\t\tfield: 'col3',\n                                    \t\t\t\t\t\t\t\tchildren: [\n                                        \t\t\t\t\t\t\t\t{\n                                            \t\t\t\t\t\t\t\t\tlabel: 'col-1-1-1-1',\n                                            \t\t\t\t\t\t\t\t\tfield: 'col4'\n                                        \t\t\t\t\t\t\t\t},\n                                        \t\t\t\t\t\t\t\t{\n                                            \t\t\t\t\t\t\t\t\tlabel: 'col-1-1-1-2',\n                                            \t\t\t\t\t\t\t\t\tfield: 'col3'\n                                        \t\t\t\t\t\t\t\t}\n                                    \t\t\t\t\t\t\t\t]\n                                \t\t\t\t\t\t\t}\n                            \t\t\t\t\t\t\t]\n                        \t\t\t\t\t\t},\n                        \t\t\t\t\t\t{\n                            \t\t\t\t\t\t\tlabel: 'col-1-2',\n                            \t\t\t\t\t\t\tfield: 'col2',\n                            \t\t\t\t\t\t\tchildren: [\n                                \t\t\t\t\t\t\t{\n                                    \t\t\t\t\t\t\t\tlabel: 'col-1-2-1',\n                                    \t\t\t\t\t\t\t\tfield: 'col1',\n                                \t\t\t\t\t\t\t},\n                                \t\t\t\t\t\t\t{\n                                    \t\t\t\t\t\t\t\tlabel: 'col-1-2-2',\n                                    \t\t\t\t\t\t\t\tfield: 'col2',\n                                \t\t\t\t\t\t\t}\n                            \t\t\t\t\t\t\t]\n                        \t\t\t\t\t\t}\n                    \t\t\t\t\t\t]\n                \t\t\t\t\t},\n                \t\t\t\t\t{ label: 'col-2', field: 'col9' }\n            \t\t\t\t\t]\n        \t\t\t\t})\n        \tlet list = []\n        \tfor (let i = 0, l = this.rowLen.value, row = {}; i < l; i++) {\n            \t\trow = {}\n            \t\tfor(let j = 0, k = head.length; j < k; j++) {\n                \t\trow.index = i + 1\n                \t\trow[`col${j}`] = `row-${i + 1}-col${j + 1}`\n            \t\t}\n            \t\tlist.push(row)\n        \t}\n\t\tthis.head.value = head\n\t\tthis.list.value = list\n\t}\n}\n<\/script>\n\n")])])]),n("h3",{attrs:{id:"自定义表头列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义表头列"}},[t._v("#")]),t._v(" 自定义表头列")]),t._v(" "),n("blockquote",[n("p",[t._v("设置列的 "),n("code",[t._v("slot")]),t._v("属性中的 "),n("code",[t._v("head")]),t._v("可实现自定义表头列的功能")])]),t._v(" "),n("ClientOnly",[n("vp-table-slot-head")],1),t._v(" "),n("div",{staticClass:"language-canvas extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<canvas width=\"800\" height=\"500\">\n\t<table width=\"600\" height=\"250\" :columns=\"head\" :data=\"list\"></table>\n</canvas>\n<script>\nexport default {\n\tdata: {\n\t\tcolLen: 10,\n            \trowLen: 4,\n\t\thead: [],\n\t\tlist: [],\n\t\tfixedLeftColIndex: [],\n\t\tfixedRightColIndex: []\n\t},\n\tmounted() {\n\t\tconst head = Array.from({ length: this.colLen.value }).map((e, i) => ({\n            \t\tfield: `col${i}`,\n            \t\tlabel: `col${i + 1}`,\n\t\t\t\t\tfixed: ((i) => {\n\t\t\t\t\t\tif (this.fixedLeftColIndex.includes(i)) {\n\t\t\t\t\t\t\treturn 'left'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.fixedRightColIndex.includes(i)) {\n\t\t\t\t\t\t\treturn 'right'\n\t\t\t\t\t\t}\n\t\t\t\t\t})(i),\n\t\t\t\t}))\n     \t\thead.push({\n            \t\tfield: 'col3',\n            \t\tlabel: '操作',\n            \t\tfixed: 'right',\n            \t\twidth: 150,\n            \t\tslot: {\n                \t\thead: (h, col) => {\n                    \t\t\treturn h('span', {\n                        \t\t\ttext: `${col.label}-${col.field}`\n                    \t\t\t})\n                \t\t}\n            \t\t}\n        \t})\n        \tlet list = []\n        \tfor (let i = 0, l = this.rowLen.value, row = {}; i < l; i++) {\n            \t\trow = {}\n            \t\tfor(let j = 0, k = head.length; j < k; j++) {\n                \t\trow.index = i + 1\n                \t\trow[`col${j}`] = `row-${i + 1}-col${j + 1}`\n            \t\t}\n            \t\tlist.push(row)\n        \t}\n\t\tthis.head.value = head\n\t\tthis.list.value = list\n\t}\n}\n<\/script>\n\n\n")])])]),n("h3",{attrs:{id:"自定义内容列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义内容列"}},[t._v("#")]),t._v(" 自定义内容列")]),t._v(" "),n("blockquote",[n("p",[t._v("设置列的 "),n("code",[t._v("slot")]),t._v("属性中的 "),n("code",[t._v("body")]),t._v("可实现自定义内容列的功能")])]),t._v(" "),n("ClientOnly",[n("vp-table-slot-body")],1),t._v(" "),n("div",{staticClass:"language-canvas extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<canvas width=\"800\" height=\"500\">\n\t<table width=\"800\" height=\"500\" :columns=\"head\" :data=\"list\"></table>\n</canvas>\n<script>\nexport default {\n\tdata: {\n\t\tcolLen: 10,\n            \trowLen: 4,\n\t\thead: [],\n\t\tlist: [],\n\t\tfixedLeftColIndex: [],\n\t\tfixedRightColIndex: []\n\t},\n\tmounted() {\n\t\tconst head = Array.from({ length: this.colLen.value }).map((e, i) => ({\n            \t\tfield: `col${i}`,\n            \t\tlabel: `col${i + 1}`,\n\t\t\t\t\tfixed: ((i) => {\n\t\t\t\t\t\tif (this.fixedLeftColIndex.includes(i)) {\n\t\t\t\t\t\t\treturn 'left'\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.fixedRightColIndex.includes(i)) {\n\t\t\t\t\t\t\treturn 'right'\n\t\t\t\t\t\t}\n\t\t\t\t\t})(i),\n\t\t\t\t}))\n     \t\thead.push({\n            \t\tfield: 'col3',\n            \t\tlabel: '操作',\n            \t\tfixed: 'right',\n            \t\twidth: 150,\n            \t\tslot: {\n                \t\thead: (h, col) => {\n                    \t\t\treturn h('span', {\n                        \t\t\ttext: `${col.label}-${col.field}`\n                    \t\t\t})\n                \t\t}\n            \t\t}\n        \t})\n\t\thead.push({\n            \t\tfield: 'operation',\n            \t\tlabel: '操作',\n            \t\tfixed: 'right',\n            \t\twidth: 250,\n            \t\tslot: {\n                \t\thead: (h, col) => {\n                    \t\t\treturn h('span', {\n                        \t\t\ttext: `${col.label}`\n                    \t\t\t})\n                \t\t},\n                \t\tbody: (h, scope) => {\n                    \t\t\treturn [\n                        \t\t\th('button', {\n                            \t\t\t\t// type: 'success',\n                            \t\t\t\ttype: 'text',\n                            \t\t\t\ttext: '查看',\n                            \t\t\t\ton: {\n                                \t\t\t\tclick() {\n                                    \t\t\t\t\talert(`查看第${scope.$index + 1}行`)\n                                \t\t\t\t}\n                            \t\t\t\t}\n                        \t\t\t}),\n                        \t\t\th('link', {\n                            \t\t\t\ttype: 'primary',\n                            \t\t\t\ttext: '编辑',\n                            \t\t\t\ton: {\n                                \t\t\t\tclick() {\n                                    \t\t\t\t\talert(`编辑第${scope.$index + 1}行`)\n                                \t\t\t\t}\n                            \t\t\t\t}\n                        \t\t\t}),\n                        \t\t\th('link', {\n                            \t\t\t\ttype: 'danger',\n                            \t\t\t\ttext: '删除',\n                            \t\t\t\tdisabled: true,\n                            \t\t\t\ton: {\n                                \t\t\t\tclick() {\n                                    \t\t\t\t\talert(`删除第${scope.$index + 1}行`)\n                                \t\t\t\t}\n                            \t\t\t\t}\n                        \t\t\t}),\n                        \t\t\th('dropdown', {\n                            \t\t\t\ttext: '更多',\n                            \t\t\t\ttrigger: 'click',\n                            \t\t\t\tlist: [\n                                \t\t\t\t{ name: `btn${scope.$index + 1}`, value: `btn${scope.$index + 1}` },\n                            \t\t\t\t],\n                            \t\t\t\ton: {\n                                \t\t\t\tcommand: (val) => {\n                                    \t\t\t\t\talert(`点击了第${scope.$index + 1}行-${val}`)\n                                \t\t\t\t}\n                            \t\t\t\t}\n                        \t\t\t})\n                    \t\t\t]\n                \t\t}\n            \t\t}\n        \t})\n        \tlet list = []\n        \tfor (let i = 0, l = this.rowLen.value, row = {}; i < l; i++) {\n            \t\trow = {}\n            \t\tfor(let j = 0, k = head.length; j < k; j++) {\n                \t\trow.index = i + 1\n                \t\trow[`col${j}`] = `row-${i + 1}-col${j + 1}`\n            \t\t}\n            \t\tlist.push(row)\n        \t}\n\t\tthis.head.value = head\n\t\tthis.list.value = list\n\t}\n}\n<\/script>\n\n\n\n")])])]),n("h3",{attrs:{id:"大数据量渲染"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#大数据量渲染"}},[t._v("#")]),t._v(" 大数据量渲染")]),t._v(" "),n("blockquote",[n("p",[t._v("table元素就是为解决dom中大数据表格渲染卡顿的问题而开发，能够稳定并流畅展示百万级数据")])]),t._v(" "),n("ClientOnly",[n("vp-table-big-data")],1),t._v(" "),n("div",{staticClass:"language-canvas extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<canvas width="1200" height="600">\n\t<table width="1200" height="600" :columns="head" :data="list"></table>\n</canvas>\n<script>\nexport default {\n\tdata: {\n  \t\tcolLen: 1000,\n            \trowLen: 10000,\n\t\thead: [],\n\t\tlist: []\n\t},\n\tmounted() {\n\t\tconst head = Array.from({ length: this.colLen.value }).map((e, i) => ({\n            \t\tfield: `col${i}`,\n            \t\tlabel: `col${i + 1}`,\n        \t}))\n        \tlet list = []\n        \tfor (let i = 0, l = this.rowLen.value, row = {}; i < l; i++) {\n            \t\trow = {}\n            \t\tfor(let j = 0, k = head.length; j < k; j++) {\n                \t\trow.index = i + 1\n                \t\trow[`col${j}`] = `row-${i + 1}-col${j + 1}`\n            \t\t}\n            \t\tlist.push(row)\n        \t}\n\t\tthis.head.value = head\n\t\tthis.list.value = list\n\t}\n}\n<\/script>\n\n')])])]),n("h3",{attrs:{id:"元素参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#元素参数"}},[t._v("#")]),t._v(" 元素参数")]),t._v(" "),n("h4",{attrs:{id:"table-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#table-2"}},[t._v("#")]),t._v(" table")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("参数")]),t._v(" "),n("th",[t._v("说明")]),t._v(" "),n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("可选值")]),t._v(" "),n("th",[t._v("默认值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("columns")]),t._v(" "),n("td",[t._v("表格列配置")]),t._v(" "),n("td",[t._v("Array")]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("[]")])]),t._v(" "),n("tr",[n("td",[t._v("data")]),t._v(" "),n("td",[t._v("表格数据")]),t._v(" "),n("td",[t._v("Array")]),t._v(" "),n("td"),t._v(" "),n("td",[t._v("[]")])])])]),t._v(" "),n("h4",{attrs:{id:"col"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#col"}},[t._v("#")]),t._v(" col")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("参数")]),t._v(" "),n("th",[t._v("说明")]),t._v(" "),n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("可选值")]),t._v(" "),n("th",[t._v("默认值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("label")]),t._v(" "),n("td",[t._v("表头列显示文字")]),t._v(" "),n("td",[t._v("string")]),t._v(" "),n("td"),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("field")]),t._v(" "),n("td",[t._v("列绑定字段")]),t._v(" "),n("td",[t._v("string")]),t._v(" "),n("td"),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("width")]),t._v(" "),n("td",[t._v("列宽")]),t._v(" "),n("td",[t._v("number")]),t._v(" "),n("td"),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("fixed")]),t._v(" "),n("td",[t._v("固定列")]),t._v(" "),n("td",[t._v("string")]),t._v(" "),n("td",[t._v("left| right")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("type")]),t._v(" "),n("td",[t._v("列显示类型")]),t._v(" "),n("td",[t._v("string")]),t._v(" "),n("td",[t._v("checkbox")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("children")]),t._v(" "),n("td",[t._v("树形表头列配置")]),t._v(" "),n("td",[t._v("Array<col>")]),t._v(" "),n("td"),t._v(" "),n("td")])])]),t._v(" "),n("h3",{attrs:{id:"元素事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#元素事件"}},[t._v("#")]),t._v(" 元素事件")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("事件名称")]),t._v(" "),n("th",[t._v("说明")]),t._v(" "),n("th",[t._v("回调参数")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("selection-change")]),t._v(" "),n("td",[t._v("勾选表格数据时触发的事件")]),t._v(" "),n("td",[t._v("selection")])])])])],1)}),[],!1,null,null,null);n.default=a.exports}}]);